// react
import React, { Component } from 'react';
import { View, Image, TextInput, Modal } from 'react-native';

import { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';

import Svg, {
  Path,
  G,
} from 'react-native-svg';

// UI
import { Button, Text } from 'native-base';

import CalendarPicker from '../calendarPicker';

// images
import Calendar from '../../../assets/calendar.png';
import CalendarActive from '../../../assets/calendar_active.png';

// styles
import styles from './styles';
import ThemeVariables from '../../../smart-home-theme/variables/material';

const MAX_HOUR = 23;
const MAX_MINUTE = 59;

class CameraTopPanel extends Component {
    constructor(props) {
      super(props);

      this.state = {
        isOpened: false,
        date: new Date(),
        hours: '00',
        minutes: '00',
      };
    }

  onDateChange = (date) => {
    this.setState({
      date,
    });
  }

  isCalendarOpened = () => this.state.isOpened;

  toggleCalendar = () => {
    const state = this.state;

    state.isOpened = !state.isOpened;

    this.setState(state);
  }

  handleHours = (hours) => {
    const hoursAsInt = parseInt(hours, 10);

    if (hoursAsInt > MAX_HOUR) {
      this.setState({ hours: MAX_HOUR });
    } else {
      this.setState({ hours });
    }
  }

  handleMinutes = (minutes) => {
    const minutesAsInt = parseInt(minutes, 10);

    if (minutesAsInt > MAX_MINUTE) {
      this.setState({ hours: MAX_MINUTE });
    } else {
      this.setState({ minutes });
    }
  }

  applyFilter = () => {
    const hoursAsInt = parseInt(this.state.hours, 10);
    const minutesAsInt = parseInt(this.state.minutes, 10);
    const seconds = 0;
    const epochDate = this.state.date.setHours(hoursAsInt, minutesAsInt, seconds);

    this.props.onFilter(epochDate);
    this.toggleCalendar();
  }

  renderCalendar = () => {
    if (this.state.isOpened === false) {
      return <View />;
    }

    const date = new Date();
    const firstDay = new Date(date.setDate(date.getDate() - 13));
    const lastDay = new Date();

    return (
      <View style={styles.calendarContainer}>
        <Modal visible={this.state.isOpened} transparent onRequestClose={this.toggleCalendar}>
          <View style={styles.calendarInternalContentContainer}>
            {this.renderButtonsPanel()}
            <KeyboardAwareScrollView>
              <CalendarPicker
                onDateChange={this.onDateChange}
                selectedDayColor={ThemeVariables.mainApplicationColor}
                minDate={firstDay}
                maxDate={lastDay}
                textStyle={styles.calendarDaysText}
                months={[
                'ЯНВАРЬ',
                'ФЕВРАЛЬ',
                'МАРТ',
                'АПРЕЛЬ',
                'МАЙ',
                'ИЮНЬ',
                'ИЮЛЬ',
                'АВГУСТ',
                'СЕНТЯБРЬ',
                'ОКТЯБРЬ',
                'НОЯБРЬ',
                'ДЕКАБРЬ',
                ]}
                enableSwipe={false}
              />
              <View style={styles.timePicker.container}>
                <TextInput
                  style={styles.timePicker.input}
                  maxLength={2}
                  keyboardType="numeric"
                  value={this.state.hours}
                  onChangeText={hours => this.handleHours(hours)}
                  underlineColorAndroid="rgba(0,0,0,0)"
                />
                <Text style={styles.timePicker.delimer}>:</Text>
                <TextInput
                  style={styles.timePicker.input}
                  maxLength={2}
                  keyboardType="numeric"
                  value={this.state.minutes}
                  onChangeText={minutes => this.handleMinutes(minutes)}
                  underlineColorAndroid="rgba(0,0,0,0)"
                />
              </View>
              <Button style={styles.submitButton.button} bordered rounded full primary onPress={this.applyFilter} underlayColor="white">
                <Text style={styles.submitButton.text}>СМОТРЕТЬ ЗАПИСЬ</Text>
              </Button>
            </KeyboardAwareScrollView>
          </View>
        </Modal>
      </View>
    );
  }

  renderButtonsPanel = () => (
    <View style={styles.topButtons.container}>
      <Button style={[styles.topButtons.button, styles.topButtons.bordered]} onPress={this.props.toggleFavorite}>
        <Svg width="27" height="25" viewBox="0 0 20 19">
          <G transform="translate(-25.000000, -75.000000)">
            <Path d="M34.8910042,90.192306 L29.89433,92.7335753 C29.7466475,92.8086855 29.5660384,92.749854 29.4909282,92.6021715 C29.4622769,92.545837 29.4521492,92.4818928 29.4619898,92.4194618 L30.3348234,86.8820469 L26.3738754,82.9152228 C26.256805,82.7979787 26.2569458,82.6080293 26.3741899,82.4909589 C26.4189134,82.4463016 26.4765983,82.4169096 26.5390147,82.4069764 L32.0751296,81.5259352 L34.6238032,76.5330337 C34.6991322,76.3854627 34.8798284,76.326899 35.0273994,76.402228 C35.0836914,76.4309628 35.1294703,76.4767418 35.1582051,76.5330337 L37.7068787,81.5259352 L43.2429937,82.4069764 C43.40662,82.4330166 43.5181555,82.5867717 43.4921153,82.750398 C43.4821821,82.8128144 43.4527902,82.8704993 43.4081329,82.9152228 L39.4471849,86.8820469 L40.3200185,92.4194618 C40.3458161,92.5831265 40.2340527,92.7367161 40.070388,92.7625137 C40.007957,92.7723544 39.9440128,92.7622266 39.8876783,92.7335753 L34.8910042,90.192306 Z" id="Star" stroke={ThemeVariables.mainApplicationColor} fill={this.props.camera.favorite && ThemeVariables.mainApplicationColor || "transparent"}></Path>
          </G>
        </Svg>
        <Text style={styles.topButtons.text}>СДЕЛАТЬ {'\n'}ИЗБРАННОЙ</Text>
      </Button>
      {this.renderCalendarButton()}
    </View>);

  renderCalendarButton = () => {
    let buttonStyles = styles.topButtons.button;
    let buttonImage = Calendar;

    if (this.state.isOpened === true) {
      buttonStyles = [styles.topButtons.button, styles.topButtons.buttonActive];
      buttonImage = CalendarActive;
    }

    return (
      <Button
        style={buttonStyles}
        onPress={() => {
          this.props.navigation.navigate('NumberGate');
        }}
      >
        {/*<Svg width="25" height="25" viewBox="0 0 18 18">
          <G transform="translate(-197.000000, -85.000000)">
            <Path d="M201.793218,85.0700994 C201.475939,85.0700994 201.21875,85.3300639 201.21875,85.6507445 L201.21875,87.8825994 C200.55261,88.1242271 200.069814,88.7699065 200.069814,89.5217123 C200.069814,90.4768794 200.848218,91.2636477 201.793218,91.2636477 C202.738218,91.2636477 203.516622,90.4768794 203.516622,89.5217123 C203.516622,88.7699065 203.033824,88.1242271 202.367686,87.8825994 L202.367686,85.6507445 C202.367686,85.3300639 202.110478,85.0700994 201.793218,85.0700994 Z M210.21875,85.0700994 C209.901471,85.0700994 209.644282,85.3300639 209.644282,85.6507445 L209.644282,87.8825994 C208.978142,88.1242271 208.495346,88.7699065 208.495346,89.5217123 C208.495346,90.4768794 209.27375,91.2636477 210.21875,91.2636477 C211.16375,91.2636477 211.942154,90.4768794 211.942154,89.5217123 C211.942154,88.7699065 211.459358,88.1242271 210.793218,87.8825994 L210.793218,85.6507445 C210.793218,85.3300639 210.53601,85.0700994 210.21875,85.0700994 Z M199.17675,86.0488892 C198.016554,86.0488892 197,87.193811 197,88.3664703 L197,100.741465 C197,101.914135 197.952171,102.876555 199.112367,102.876555 L212.887633,102.876555 C214.04781,102.876555 215,101.914135 215,100.741465 L215,88.3664703 C215,87.193811 214.112193,86.0488892 212.952016,86.0488892 L211.809064,86.0488892 C211.505572,86.0445537 211.175977,86.350436 211.15979,86.6882935 C211.143603,87.0261509 211.441189,87.3970174 211.744681,87.39268 L212.412598,87.39268 C212.955049,87.39268 213.37685,87.818171 213.376029,88.3664703 L213.376029,91.6507445 L198.504221,91.6507445 L198.504221,88.3664703 C198.504221,87.818171 198.925181,87.39268 199.467651,87.39268 L200.255319,87.39268 C200.558811,87.3970155 200.816079,87.0066705 200.831333,86.6882935 C200.846587,86.3699164 200.623194,86.0445517 200.319702,86.0488892 L199.17675,86.0488892 Z M203.330994,86.0700994 C203.013715,86.0700994 202.756526,86.4018288 202.756526,86.7225192 C202.756526,87.0431901 203.077545,87.374939 203.394823,87.374939 L208.756526,87.374939 C209.073804,87.374939 209.267164,87.0431901 209.267164,86.7225192 C209.267164,86.4018288 209.009975,86.0700994 208.692696,86.0700994 L203.330994,86.0700994 Z M201.793218,88.9410671 C202.117295,88.9410671 202.367686,89.1941529 202.367686,89.5217123 C202.367686,89.8492716 202.117295,90.1023574 201.793218,90.1023574 C201.469141,90.1023574 201.21875,89.8492716 201.21875,89.5217123 C201.21875,89.1941529 201.469141,88.9410671 201.793218,88.9410671 Z M210.21875,88.9410671 C210.542827,88.9410671 210.793218,89.1941529 210.793218,89.5217123 C210.793218,89.8492716 210.542827,90.1023574 210.21875,90.1023574 C209.894673,90.1023574 209.644282,89.8492716 209.644282,89.5217123 C209.644282,89.1941529 209.894673,88.9410671 210.21875,88.9410671 Z M198.574468,93.0533148 L213.425532,93.0533148 L213.425532,100.552965 C213.425532,101.07155 213.027369,101.473985 212.51432,101.473985 L199.48568,101.473985 C198.972612,101.473985 198.574468,101.07155 198.574468,100.552965 L198.574468,93.0533148 Z" id="Shape" fill={ThemeVariables.mainApplicationColor}></Path>
          </G>
        </Svg>
        <Text style={styles.topButtons.text}>ВЫБРАТЬ {'\n'}ДАТУ</Text>*/}
        <Svg width="27" height="25" viewBox="0 0 86 64">
          <Path d="M85.385,22.052 L85.385,20.961 C85.385,18.053 83.019,15.687 80.111,15.687 C79.965,15.687 79.819,15.703 79.677,15.735 C79.622,15.747 78.054,16.092 75.452,16.582 L69.636,3.496 C69.363,2.882 68.8,2.446 68.137,2.336 C67.564,2.239 53.994,0 42.423,0 C30.837,0 18.36,2.244 17.834,2.34 C17.183,2.458 16.633,2.891 16.364,3.495 L10.549,16.581 C7.946,16.091 6.378,15.747 6.323,15.735 C6.181,15.703 6.035,15.687 5.889,15.687 C2.981,15.687 0.615,18.053 0.615,20.961 L0.615,22.052 C0.615,24.56 2.374,26.664 4.723,27.197 L2.507,32.367 C2.401,32.616 2.345,32.885 2.345,33.155 L2.345,48.155 C2.345,48.462 2.436,48.744 2.562,49.008 C2.429,49.479 2.345,49.964 2.345,50.463 L2.345,58.539 C2.345,61.551 4.795,64.001 7.806,64.001 L15.883,64.001 C18.894,64.001 21.344,61.551 21.344,58.539 L21.344,53.939 C27.928,55.029 35.72,55.924 43.575,55.924 C51.118,55.924 58.44,55.099 64.652,54.068 L64.652,58.539 C64.652,61.551 67.102,64.001 70.114,64.001 L78.191,64.001 C81.202,64.001 83.652,61.551 83.652,58.539 L83.652,50.463 C83.652,49.965 83.568,49.48 83.435,49.008 C83.561,48.744 83.652,48.462 83.652,48.155 L83.652,33.155 C83.652,32.884 83.597,32.616 83.49,32.367 L81.274,27.197 C83.625,26.664 85.385,24.56 85.385,22.052 Z M19.585,6.099 C22.821,5.563 33.078,4 42.423,4 C51.844,4 62.989,5.588 66.422,6.113 L71.396,17.306 C64.118,18.54 53.137,20.052 43,20.052 C32.869,20.052 21.885,18.54 14.605,17.306 L19.585,6.099 Z M17.346,58.538 C17.346,59.344 16.69,60 15.885,60 L7.808,60 C7.002,60 6.347,59.344 6.347,58.538 L6.347,50.773 C8.715,51.389 12.571,52.322 17.347,53.228 L17.347,58.538 L17.346,58.538 Z M78.192,60 L70.115,60 C69.309,60 68.653,59.344 68.653,58.538 L68.653,53.351 C73.443,52.428 77.284,51.458 79.6530011,50.811 L79.653,58.538 C79.654,59.344 78.998,60 78.192,60 Z M81.385,22.052 C81.385,22.755 80.813,23.326 80.111,23.326 C79.937,23.326 79.763,23.348 79.594,23.394 C79.575,23.399 79.026,23.544 78.018,23.779 C77.442,23.914 76.954,24.296 76.687,24.824 C76.419,25.352 76.4,25.971 76.633,26.515 L79.654,33.564 L79.654,46.654 C75.018,47.957 59.591,51.923 43.577,51.923 C27.489,51.923 11.186,47.922 6.346,46.631 L6.346,33.564 L9.367,26.515 C9.6,25.971 9.58,25.352 9.313,24.824 C9.046,24.296 8.559,23.914 7.982,23.779 C6.974,23.545 6.425,23.399 6.406,23.394 C6.238,23.348 6.064,23.326 5.889,23.326 C5.186,23.326 4.615,22.755 4.615,22.052 L4.615,20.961 C4.615,20.315 5.098,19.779 5.723,19.697 C8.234,20.241 26.412,24.051 42.999,24.051 C59.586,24.051 77.765,20.24 80.276,19.697 C80.901,19.779 81.384,20.314 81.384,20.961 L81.384,22.052 L81.385,22.052 Z M16.462,31.154 C12.814,31.154 9.846,34.122 9.846,37.769 C9.846,41.416 12.814,44.384 16.462,44.384 C20.109,44.384 23.077,41.416 23.077,37.769 C23.077,34.122 20.109,31.154 16.462,31.154 Z M16.462,40.385 C15.02,40.385 13.846,39.212 13.846,37.77 C13.846,36.328 15.019,35.155 16.462,35.155 C17.904,35.155 19.077,36.328 19.077,37.77 C19.077,39.212 17.904,40.385 16.462,40.385 Z M69.538,31.154 C65.891,31.154 62.923,34.122 62.923,37.769 C62.923,41.416 65.891,44.384 69.538,44.384 C73.185,44.384 76.153,41.416 76.153,37.769 C76.153,34.122 73.186,31.154 69.538,31.154 Z M69.538,40.385 C68.096,40.385 66.923,39.212 66.923,37.77 C66.923,36.328 68.096,35.155 69.538,35.155 C70.98,35.155 72.153,36.328 72.153,37.77 C72.153,39.212 70.98,40.385 69.538,40.385 Z M56.846,33.462 C57.95,33.462 58.846,34.358 58.846,35.462 C58.846,36.566 57.95,37.462 56.846,37.462 L29.154,37.462 C28.05,37.462 27.154,36.566 27.154,35.462 C27.154,34.358 28.05,33.462 29.154,33.462 L56.846,33.462 Z M56.846,41.538 C57.95,41.538 58.846,42.434 58.846,43.538 C58.846,44.642 57.95,45.538 56.846,45.538 L29.154,45.538 C28.05,45.538 27.154,44.642 27.154,43.538 C27.154,42.434 28.05,41.538 29.154,41.538 L56.846,41.538 Z" id="envelop" fill={ThemeVariables.mainApplicationColor}></Path>
        </Svg>
        <Text style={styles.topButtons.text}>ДОБАВИТЬ{'\n'}НОМЕР</Text>
      </Button>
    );
  }

  render() {
    return (
      <View style={styles.componentContainer}>
        {this.renderButtonsPanel()}
        {this.renderCalendar()}
      </View>
    );
  }
}

export default CameraTopPanel;
